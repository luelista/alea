# reset vector
	ALL	-	JmpAbs(ImmediateOnly(()))	0x100


# data block
10:
				0x7a7a6966
				0x0000170a
				0x00000000
20:
				0x7a7a7562
				0x0000170a
				0x00000000
30:
				0x7a7a6966
				0x7a7a7562
				0x0000170a
				0x00000000


# initialize CPU
0100:	ALL	-	Set	
	ALL	+	Mov(RegisterAndU32(CS,()))	0x00007fff
	ALL	+	Mov(RegisterAndU32(SA,()))	0x00007aff


# programm anfang

	ALL	+	Mov(RegisterAndU32(R1,()))	0x00008000
	ALL	+	Mov(RegisterAndU32(R9,()))	0x00002000
	ALL	-	Call(ImmediateOnly(()))	0x00000200

# fizzbuzz loop start

	ALL	+	Mov(RegisterAndU32(R9,()))	0x00000001
	ALL	-	Call(ImmediateOnly(()))	0x00000330
	ALL	+	Add(RegisterAndU32(R9,()))	0x00000001
	ALL	+	Cmp(RegisterAndU32(R9,()))	0x00000066
	LT	-	Jmp(RegisterAndU8(R9,6))	

	ALL	-	Halt	



# strcpy(R9 -> R1)
200:	ALL	+	Push(ThreeRegisters(R0,R1,R9))	

	ALL	+	Ld(TwoRegisters(R0,R9))	
	ALL	+	Cmp(OneRegister(R0))	
	EQ	+	Jmp(RegisterAndU8(R0,5))	
	ALL	+	Sto(TwoRegisters(R0,R1))	
	ALL	+	Add(RegisterAndU8(R1,4))	
	ALL	+	Add(RegisterAndU8(R9,4))	
	ALL	-	Jmp(RegisterAndU8(R0,6))	

	ALL	+	Pop(ThreeRegisters(R9,R1,R0))	
	ALL	+	Ret	



# print_number(R9)
250:	ALL	+	Push(ThreeRegisters(R0,R1,R9))	
	ALL	+	Push(ThreeRegisters(R6,R7,R8))	

	ALL	+	Mov(RegisterAndU8(R6,0))	

	ALL	+	Mov(RegisterAndU8(R8,10))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300
	ALL	+	Or(TwoRegisters(R6,R9))	
	ALL	+	Lsl(RegisterAndU8(R6,8))	
	ALL	+	Mov(TwoRegisters(R9,R7))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300
	ALL	+	Or(TwoRegisters(R6,R9))	
	ALL	+	Lsl(RegisterAndU8(R6,8))	
	ALL	+	Mov(TwoRegisters(R9,R7))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300
	ALL	+	Or(TwoRegisters(R6,R9))	
	ALL	+	Lsl(RegisterAndU8(R6,8))	
	ALL	+	Mov(TwoRegisters(R9,R7))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300
	ALL	+	Or(TwoRegisters(R6,R9))	
	ALL	+	Mov(TwoRegisters(R9,R7))	

	ALL	+	Or(RegisterAndU32(R6,()))	0x30303030
	ALL	+	Sto(RegisterAndU32(R6,()))	0x00008000

	ALL	+	Mov(RegisterAndU32(R6,()))	0x0000170a

	ALL	+	Sto(RegisterAndU32(R6,()))	0x00008004

	ALL	+	Pop(ThreeRegisters(R8,R7,R6))	
	ALL	+	Pop(ThreeRegisters(R9,R1,R0))	
	ALL	+	Ret	



# div(R9 / R8) -> R7 rest R9
300:	ALL	+	Mov(RegisterAndU8(R7,0))	
	ALL	+	Cmp(TwoRegisters(R9,R8))	
	LT	+	Jmp(RegisterAndU8(R0,4))	
	ALL	+	Add(RegisterAndU8(R7,1))	
	ALL	-	Add(TwoRegisters(R9,R8))	
	ALL	-	Jmp(RegisterAndU8(R0,4))	
	ALL	+	Ret	



# print_fizzbuzz(R9)
330:	ALL	+	Push(ThreeRegisters(R0,R1,R9))	

	ALL	+	Mov(TwoRegisters(R0,R9))	

# check div by 15 -> fizzbuzz
	ALL	+	Mov(RegisterAndU8(R8,15))	
	ALL	+	Mov(TwoRegisters(R9,R0))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300

	ALL	+	Cmp(OneRegister(R9))	
	NE	+	Jmp(RegisterAndU8(R0,9))	

# print fizzbuzz
	ALL	+	Mov(RegisterAndU32(R1,()))	0x00008000
	ALL	+	Mov(RegisterAndU32(R9,()))	0x00000030
	ALL	-	Call(ImmediateOnly(()))	0x00000200

# return
	ALL	+	Pop(ThreeRegisters(R9,R1,R0))	
	ALL	+	Ret	

# check div by 5 -> buzz
	ALL	+	Mov(RegisterAndU8(R8,5))	
	ALL	+	Mov(TwoRegisters(R9,R0))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300

	ALL	+	Cmp(OneRegister(R9))	
	NE	+	Jmp(RegisterAndU8(R0,9))	

# print buzz
	ALL	+	Mov(RegisterAndU32(R1,()))	0x00008000
	ALL	+	Mov(RegisterAndU32(R9,()))	0x00000020
	ALL	-	Call(ImmediateOnly(()))	0x00000200

	ALL	+	Pop(ThreeRegisters(R9,R1,R0))	
	ALL	+	Ret	

# check div by 3 -> fizz
	ALL	+	Mov(RegisterAndU8(R8,3))	
	ALL	+	Mov(TwoRegisters(R9,R0))	

	ALL	-	Call(ImmediateOnly(()))	0x00000300

	ALL	+	Cmp(OneRegister(R9))	
	NE	+	Jmp(RegisterAndU8(R0,9))	

# print fizz
	ALL	+	Mov(RegisterAndU32(R1,()))	0x00008000
	ALL	+	Mov(RegisterAndU32(R9,()))	0x00000010
	ALL	-	Call(ImmediateOnly(()))	0x00000200

	ALL	+	Pop(ThreeRegisters(R9,R1,R0))	
	ALL	+	Ret	

# none -> print_number
	ALL	+	Mov(TwoRegisters(R9,R0))	

	ALL	-	Call(ImmediateOnly(()))	0x00000250

	ALL	+	Pop(ThreeRegisters(R9,R1,R0))	
	ALL	+	Ret	






